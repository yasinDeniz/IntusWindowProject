@page "/addorder"
@inject HttpClient Http
@inject Services.ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using SalesOrder.Models

<PageTitle>Add New Order</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Add Order</h1>
    </div>

    <EditForm Model="@order" OnValidSubmit="AddNewOrder">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="@order.Name" />
        </div>

        <div class="form-group">
            <label for="state">State:</label>
            <InputText id="state" class="form-control" @bind-Value="@order.State" />
        </div>

        <div class="form-group">
            @foreach (var window in order.Windows)
            {
                <div class="card mt-3">
                    <div class="card-body">
                        <label for="quantity">Windows:</label>
                        <InputText id="windowName" class="form-control" @bind-Value="@window.Name" />
                        <div class="row">
                            <div class="col-md-12">
                                <label for="quantity">Quantity of Windows:</label>
                                <InputNumber id="quantity" class="form-control" @bind-Value="@window.QuantityOfWindows" />

                                <label for="totalSubElements">Total SubElements:</label>
                                <InputNumber id="totalSubElements" class="form-control" @bind-Value="@window.TotalSubElements" />
                            </div>

                            <div class="col-md-12">
                                <h6>SubElements:</h6>
                                <div class="d-flex">
                                    @foreach (var subElement in window.SubElements)
                                    {
                                        <div class="card sub-element me-2">
                                            <div class="card-body">
                                                <label for="element">Element:</label>
                                                <InputNumber id="element" class="form-control" @bind-Value="@subElement.Element" />

                                                <label for="type">Type:</label>
                                                <InputText id="type" class="form-control" @bind-Value="@subElement.Type" />

                                                <label for="width">Width:</label>
                                                <InputNumber id="width" class="form-control" @bind-Value="@subElement.Width" />

                                                <label for="height">Height:</label>
                                                <InputNumber id="height" class="form-control" @bind-Value="@subElement.Height" />
                                            </div>
                                        </div>
                                    }
                                    <button class="btn btn-primary" type="button" @onclick="() => AddSubElement(window)">Add Subelement</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" type="button" @onclick="AddWindow">Add Window</button>
            <button class="btn btn-success" type="submit">Add Order</button>
        </div>
    </EditForm>
</div>

@code {
    private OrderViewModel order = new OrderViewModel();
    private string notificationMessage = null;
    
    protected override void OnInitialized()
    {
        order = new OrderViewModel
            {
                Windows = new List<WindowViewModel>
            {
                new WindowViewModel
                {
                    SubElements = new List<SubElementViewModel>
                    {
                        new SubElementViewModel()
                    }
                }
            }
            };
    }
    private async Task AddNewOrder()
    {
        var apiEndpoint = "http://localhost:5010/api/Orders/AddOrder/";/*DatabaseAPI Uri*/

        var response = await Http.PostAsJsonAsync(apiEndpoint, order);

        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("alert", "Order added successfully", null);
            NavigationManager.NavigateTo("/salesorders");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("alert", $"Failed to add order. Status code: {response.StatusCode}", null);
        }
    }

    private void AddSubElement(Models.WindowViewModel window)
    {
        var newSubElement = new Models.SubElementViewModel();
        window.SubElements.Add(newSubElement);
    }
    private void AddWindow()
    {
        var newWindow = new Models.WindowViewModel
            {
                Name = "New Window", // You can set default values or leave it blank
                QuantityOfWindows = 0,
                TotalSubElements = 0,
                SubElements = new List<Models.SubElementViewModel>()
            };

        order.Windows.Add(newWindow);
    }
}

